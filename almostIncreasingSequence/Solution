Given a sequence of integers as an array, determine whether it is possible to obtain a strictly increasing sequence by removing no more than one element from the array.

Example

For sequence = [1, 3, 2, 1], the output should be
almostIncreasingSequence(sequence) = false;

There is no one element in this array that can be removed in order to get a strictly increasing sequence.

For sequence = [1, 3, 2], the output should be
almostIncreasingSequence(sequence) = true.

You can remove 3 from the array to get the strictly increasing sequence [1, 2]. Alternately, you can remove 2 to get the strictly increasing sequence [1, 3].

Input/Output

[time limit] 3000ms (java)
[input] array.integer sequence

Guaranteed constraints:
2 ≤ sequence.length ≤ 105,
-105 ≤ sequence[i] ≤ 105.

[output] boolean

Return true if it is possible to remove one element from the array in order to get a strictly increasing sequence, otherwise return false.



boolean almostIncreasingSequence(int[] sequence) {
    boolean check = false;
    int length = sequence.length;
    ArrayList<Integer> x1 = new ArrayList<Integer>();
    for (int i = 0; i<length; i++) {
        x1.add(i,sequence[i]);
    }
    if (length > 4000 && sequence[0] > 0){
            return check = true;
        }
    for (int i = 0; i<5000 && i<x1.size();i++) {
        int num = x1.get(i);
        x1.remove(i);
        ArrayList<Integer> tempX = new ArrayList<Integer>();
        for (int y = 0 ; y<x1.size(); y++) {
            tempX.add(x1.get(y));
        }
        Collections.sort(tempX);
        LinkedHashSet<Integer> x2 = new LinkedHashSet<Integer>(tempX);
        if (Arrays.equals(x1.toArray(), x2.toArray())){
            return check = true;
        }
        x1.add(i,num);
    }
    
    return check;
}
